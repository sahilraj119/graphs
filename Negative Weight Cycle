Given a weighted directed graph with n nodes and m edges. Nodes are labeled from 0 to n-1, the task is to check if it contains a negative weight cycle or not.
Note: edges[i] is defined as u, v and weight.
 
 Example 1:

Input: n = 3, edges = {{0,1,-1},{1,2,-2},
{2,0,-3}}
Output: 1
Explanation: The graph contains negative weight
cycle as 0->1->2->0 with weight -1,-2,-3,-1.We have to tell wheather the graph contains a negative weught cycle that means total weight of cycle in a graph in negative or not.

CODE--->

int isNegativeWeightCycle(int n, vector<vector<int>>edges){
	   
	   vector<int> v(n,INT_MAX);
	   v[0]=0;
	   for(int i=0;i<n-1;i++){
	      for(int j=0;j<edges.size();j++){
	          int u=edges[j][0];
	          int x=edges[j][1];
	          int w= edges[j][2];
	          if(v[u]==INT_MAX)continue;
	          if(v[u]+w<v[x]){
	              v[x]=v[u]+w;
	          }
	      }
	   }
     // Paste the whole second loop here .
	    for(int j=0;j<edges.size();j++){
	          int u=edges[j][0];
	          int x=edges[j][1];
	          int w= edges[j][2];
	          if(v[u]==INT_MAX)continue;
	          if(v[u]+w<v[x]){
	             return 1;
	          }
	      }
	      return 0;

	}
